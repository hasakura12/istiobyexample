<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Istio By Example (ja)</title><link>https://istiobyexample-ja.github.io/istiobyexample/</link><description>Recent content on Istio By Example (ja)</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 31 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://istiobyexample-ja.github.io/istiobyexample/index.xml" rel="self" type="application/rss+xml"/><item><title>Egressトラフィック監視</title><link>https://istiobyexample-ja.github.io/istiobyexample/monitoring-egress-traffic/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/monitoring-egress-traffic/</guid><description>サービスメッシュについて考える1つの方法は、ドメイン制御です。 Istioサイドカーインジェクションが有効になっているKubernetesのN</description></item><item><title>External Services</title><link>https://istiobyexample-ja.github.io/istiobyexample/external-services/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/external-services/</guid><description>A service mesh often spans one environment— for instance, one Kubernetes cluster. And together, all the connected services in that environment form the management domain of that mesh, from which you can view metrics and set policies.
But what if you are also running services outside the cluster, or you depend on external APIs?
Have no fear. Istio provides a resource called a ServiceEntry that lets you logically bring external services into your mesh &amp;ndash; even services you don&amp;rsquo;t own.</description></item><item><title>gRPC</title><link>https://istiobyexample-ja.github.io/istiobyexample/grpc/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/grpc/</guid><description>gRPC はサービス間通信のプロトコルで、HTTP/2 上で動作します。リソースベースの HTTP/1 上で動作する REST と異なり、gRPC は Service Definitions ベースです。データの通</description></item><item><title>Ingress</title><link>https://istiobyexample-ja.github.io/istiobyexample/ingress/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/ingress/</guid><description>Ingress トラフィックはクラスター外からメッシュへ入ってくるトラフィックのことを指します。 Kubernetes は Ingress トラフィックを扱う方法を LoadBalancer タイプ や Ingress で提供しています</description></item><item><title>JWT</title><link>https://istiobyexample-ja.github.io/istiobyexample/jwt/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/jwt/</guid><description>JSON Web Token（JWT）は、サーバーアプリケーションでユーザーを識別するために使用される認証トークンの一種です。JWTにはクライアントの呼び</description></item><item><title>Pathに基づいたルーティング</title><link>https://istiobyexample-ja.github.io/istiobyexample/path-based-routing/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/path-based-routing/</guid><description>IstioとEnvoyはアプリケーショントラフィックレイヤー（L7）で動作し、HTTPヘッダーなどの属性に基づいてトラフィックを転送および負</description></item><item><title>Prometheusの持ち込み</title><link>https://istiobyexample-ja.github.io/istiobyexample/prometheus/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/prometheus/</guid><description>Prometheusは、オープンソースの監視ツールです。デフォルトでは、PrometheusはIstioと一緒にインストールされるため、Gr</description></item><item><title>カナリアデプロイメント</title><link>https://istiobyexample-ja.github.io/istiobyexample/canary/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/canary/</guid><description>カナリアデプロイメントは、新しいバージョンのサービスを安全に展開するための手法です。Istioを使うと、パーセント指定のトラフィック分岐によ</description></item><item><title>セキュアなIngress</title><link>https://istiobyexample-ja.github.io/istiobyexample/secure-ingress/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/secure-ingress/</guid><description>Kubernetesクラスター上でワークロードを実行している場合、その一部をクラスターの外部に公開したくなることがあるでしょう。Istio Ingress</description></item><item><title>データベーストラフィック</title><link>https://istiobyexample-ja.github.io/istiobyexample/databases/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/databases/</guid><description>アプリケーションは複数の環境にまたがる場合が多く、データベースはその良い例です。レガシーまたはストレージの理由で、データベースをKubern</description></item><item><title>トラフィックミラーリング</title><link>https://istiobyexample-ja.github.io/istiobyexample/traffic-mirroring/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/traffic-mirroring/</guid><description>信頼性を確保するには、本番環境でサービスをテストすることが重要です。稼働中の本番トラフィックをサービスの新しいバージョンに送信すると、継続的</description></item><item><title>フォールトインジェクション</title><link>https://istiobyexample-ja.github.io/istiobyexample/fault-injection/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/fault-injection/</guid><description>マイクロサービスを採用すると、多くの場合、依存関係が増え、制御できないサービスが増えます。また、ネットワーク上のリクエストが増えるため、エラ</description></item><item><title>リトライロジック</title><link>https://istiobyexample-ja.github.io/istiobyexample/retry/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/retry/</guid><description>マイクロサービスアーキテクチャは分散されています。これは、ネットワーク上のリクエストが増えることを意味し、ネットワークの輻輳などの一時的な障</description></item><item><title>レスポンスヘッダーの変更</title><link>https://istiobyexample-ja.github.io/istiobyexample/response-headers/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/response-headers/</guid><description>Istioでは、HTTPリクエストヘッダーに基づいてルーティングするトラフィックルールを適用できます。 Istioを使用してレスポンスヘッダー</description></item><item><title>ローカリティロードバランシング</title><link>https://istiobyexample-ja.github.io/istiobyexample/locality-load-balancing/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/locality-load-balancing/</guid><description>大規模なグローバルアプリケーションを実行している場合、複数のリージョンでサービスを実行している可能性があります。同じサービスのレプリカが複数</description></item><item><title>仮想マシン</title><link>https://istiobyexample-ja.github.io/istiobyexample/virtual-machines/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/virtual-machines/</guid><description>Kubernetesでコンテナ化されたサービスを実行すると、自動スケーリング、依存関係の分離、リソースの最適化など、多くのメリットが得られま</description></item><item><title>相互TLS</title><link>https://istiobyexample-ja.github.io/istiobyexample/mtls/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/mtls/</guid><description>マイクロサービスアーキテクチャは、ネットワーク上のリクエストが増えることと、悪意のある当事者がトラフィックを傍受する機会が増えることを意味し</description></item><item><title>複数のトラフィックルール</title><link>https://istiobyexample-ja.github.io/istiobyexample/multiple-traffic-rules/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/multiple-traffic-rules/</guid><description>Istioは、リダイレクトやトラフィック分割からミラーリングやリトライロジックまで、さまざまなトラフィック管理の使用例をサポートしています。</description></item><item><title>認可</title><link>https://istiobyexample-ja.github.io/istiobyexample/authorization/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/authorization/</guid><description>認証とは、クライアントの身元を確認することです。一方、認可では、そのクライアントのアクセス権限を確認します。すなわち、「このサービスは、クラ</description></item><item><title>負荷分散</title><link>https://istiobyexample-ja.github.io/istiobyexample/load-balancing/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://istiobyexample-ja.github.io/istiobyexample/load-balancing/</guid><description>Kubernetesは、クラスタに入ってくるトラフィックの負荷分散をサポートしています。しかし、クラスター内のKubernetes Servi</description></item></channel></rss>